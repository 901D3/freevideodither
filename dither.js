//--------------------------------------------------------------------------------------------------------------------

gId("savePreset").addEventListener("click", () => {
  if (dropdown.value === "matrixthreshold") {
    let expr = gIdV("errDiffsDivInput");
    let presetName = gId("presetName").value.trim();

    if (expr.trim() && presetName) {
      addUserPreset(expr, "matrix" + presetName);
      gId("presetName").value = '';
    } else {
      alert("Please enter both a valid matrix and preset name.");
    }
  } else if (dropdown.value === "errdiffscustom") {
    let expr = gIdV("errDiffsMatInput");
    let presetName = gId("presetName").value.trim();

    if (expr.trim() && presetName) {
      addUserPreset(expr, "errDiffs" + presetName);
      gId("presetName").value = '';
    } else {
      alert("Please enter both a valid matrix and preset name.");
    }
  } else if (dropdown.value === "arithmeticcustom") {
    let expr = gIdV("arithmeticInput");
    let presetName = gId("presetName").value.trim();

    if (expr.trim() && presetName) {
      addUserPreset(expr, "arithmetic" + presetName);
      gId("presetName").value = '';
    } else {
      alert("Please enter both a valid matrix and preset name.");
    }
  } else if (dropdown.value === "varerrdiffscustom") {
    let expr = gIdV("coefficientsInput");
    let presetName = gId("presetName").value.trim();

    if (expr.trim() && presetName) {
      addUserPreset(expr, "varErrDiffs" + presetName);
      gId("presetName").value = '';
    } else {
      alert("Please enter both a valid matrix and preset name.");
    }
  }
  presets(); populateUserPresets(); populatePreset();
});

function addUserPreset(expr, name) {
  if (localStorage.getItem(name)) {
    alert("A preset with this name already exists.");
    return;
  }
  localStorage.setItem(name, expr);
  alert(`Preset saved as ${gId("presetName").value.trim()}`);

  let option = document.createElement("option");
  option.value = name;
  option.textContent = name;

  if (dropdown.value === "matrixthreshold") {
    dropdownMatrix.appendChild(option);
  } else if (dropdown.value === "errdiffscustom") {
    dropdownErrDiffs.appendChild(option);
  } else if (dropdown.value === "arithmeticcustom") {
    dropdownArith.appendChild(option);
  } else if (dropdown.value === "varerrdiffscustom") {
    dropdownVarerrdiffs.appendChild(option);
  }
}

function populateUserPresets() {
  let currentOptions = new Set();
  dropdownErrDiffs.querySelectorAll("option").forEach(option => currentOptions.add(option.value));
  dropdownVarerrdiffs.querySelectorAll("option").forEach(option => currentOptions.add(option.value));
  dropdownArith.querySelectorAll("option").forEach(option => currentOptions.add(option.value));

  for (let i = 0; i < localStorage.length; i++) {
    let key = localStorage.key(i);
    
    if (currentOptions.has(key)) continue;

    let option = document.createElement("option");
    option.value = key;
    option.textContent = key;

    if (key.startsWith("matrix")) {
      dropdownMatrix.appendChild(option);
    } else if (key.startsWith("errDiffs")) {
      dropdownErrDiffs.appendChild(option);
    } else if (key.startsWith("varErrDiffs")) {
      dropdownVarerrdiffs.appendChild(option);
    } else if (key.startsWith("arithmetic")) {
      dropdownArith.appendChild(option);
    }
  }
}

function presets() {
  if (dropdown.value === "matrixthreshold") {
    let a = dropdownMatrix.value;
    let expr = "";
    
  switch (a) {
    case "bayer2":
      matSz = 4;
      bayerGen(sqrt(matSz));
      break;
    case "bayer4":
      matSz = 16;
      bayerGen(sqrt(matSz));
      break;
    case "bayer8":
      matSz = 64;
      bayerGen(sqrt(matSz));
      break;
    case "bayer16":
      matSz = 256;
      bayerGen(sqrt(matSz));
      break;
    case "bayer32":
      matSz = 1024;
      bayerGen(sqrt(matSz));
      break;
    case "bayer64":
      matSz = 4096;
      bayerGen(sqrt(matSz));
      break;
    case "bayer128":
      matSz = 16384;
      bayerGen(sqrt(matSz));
      break;
    case "bayer256":
      matSz = 65536;
      bayerGen(sqrt(matSz));
      break;
    case "bayer512":
      matSz = 262144;
      bayerGen(sqrt(matSz));
      break;
    case "checkerboard":
        bM = [
          [0, 1],
          [1, 0]
        ];
        matSz = 2;
      break;
      case "cluster":
        bM = [
          [11, 5, 9, 3],
          [0, 15, 13, 6],
          [7, 12, 14, 1],
          [2, 8, 4, 10]
        ];
        matSz = 16;
      break;
      case "disperseddots1":
        bM = [
          [32, 16, 20, 34, 18, 22],
          [12,  0,  4, 14,  2,  6],
          [28,  8, 24, 30, 10, 26],
          [35, 19, 23, 33, 17, 21],
          [15,  3,  7, 13,  1,  5],
          [31, 11, 27, 29,  9, 25]
        ];
        matSz = 36;
      break;
      case "disperseddots2":
        bM = [
          [ 0, 48, 12, 60,  3, 51, 15, 63],
          [32, 16, 44, 28, 35, 19, 47, 31],
          [ 8, 56,  4, 52, 11, 59,  7, 55],
          [40, 24, 36, 20, 43, 27, 39, 23],
          [ 2, 50, 14, 62,  1, 49, 13, 61],
          [34, 18, 46, 30, 33, 17, 45, 29],
          [10, 58,  6, 54,  9, 57,  5, 53],
          [42, 26, 38, 22, 41, 25, 37, 21]
        ];
        matSz = 64;
      break;
      case "voiddispersed":
        bM = [
          [131, 187,   8,  78,  50,  18, 134,  89, 155, 102,  29,  95, 184,  73],
          [ 22,  86, 113, 171, 142, 105,  34, 166,   9,  60, 151, 128,  40, 110],
          [168, 137,  45,  28,  64, 188,  82,  54, 124, 189,  80,  13, 156,  56],
          [  7,  61, 186, 121, 154,   6, 108, 177,  24, 100,  38, 176,  93, 123],
          [ 83, 148,  96,  17,  88, 133,  44, 145,  69, 161, 139,  72,  30, 181],
          [115,  27, 163,  47, 178,  65, 164,  14, 120,  48,   5, 127, 153,  52],
          [190,  58, 126,  81, 116,  21, 106,  77, 173,  92, 191,  63,  99,  12],
          [ 76, 144,   4, 185,  37, 149, 192,  39, 135,  23, 117,  31, 170, 132],
          [ 35, 172, 103,  66, 129,  79,   3,  97,  57, 159,  70, 141,  53,  94],
          [114,  20,  49, 158,  19, 146, 169, 122, 183,  11, 104, 180,   2, 165],
          [152,  87, 182, 118,  91,  42,  67,  25,  84, 147,  43,  85, 125,  68],
          [ 16, 136,  71,  10, 193, 112, 160, 138,  51, 111, 162,  26, 194,  46],
          [174, 107,  41, 143,  33,  74,   1, 101, 195,  15,  75, 140, 109,  90],
          [ 32,  62, 157,  98, 167, 119, 179,  59,  36, 130, 175,  55,   0, 150]
        ];
        matSz = 196;
      break;
      case "nonrect1":
        bM = [
          [4, 3, 0, 1, 2],
          [0, 1, 2, 4, 3],
          [2, 4, 3, 0, 1],
          [3, 0, 1, 2, 4],
          [1, 2, 4, 3, 0]
        ];
        matSz = 5;
      break;
      case "nonrect2":
        bM = [
          [7, 6, 2, 9, 0, 1, 3, 8, 5, 4],
          [0, 1, 3, 8, 5, 4, 7, 6, 2, 9],
          [5, 4, 7, 6, 2, 9, 0, 1, 3, 8],
          [2, 9, 0, 1, 3, 8, 5, 4, 7, 6],
          [3, 8, 5, 4, 7, 6, 2, 9, 0, 1]
        ];
        matSz = 8;
      break;
      case "nonrect3":
        bM = [
          [9, 8, 4, 7, 3, 0, 1, 5, 2, 6],
          [5, 2, 6, 9, 8, 4, 7, 3, 0, 1],
          [3, 0, 1, 5, 2, 6, 9, 8, 4, 7],
          [8, 4, 7, 3, 0, 1, 5, 2, 6, 9],
          [2, 6, 9, 8, 4, 7, 3, 0, 1, 5],
          [0, 1, 5, 2, 6, 9, 8, 4, 7, 3],
          [4, 7, 3, 0, 1, 5, 2, 6, 9, 8],
          [6, 9, 8, 4, 7, 3, 0, 1, 5, 2],
          [1, 5, 2, 6, 9, 8, 4, 7, 3, 0],
          [7, 3, 0, 1, 5, 2, 6, 9, 8, 4]
        ];
        matSz = 10;
      break;
      case "nonrect4":
        bM = [
          [7, 6, 2, 9, 0, 1, 3, 8, 5, 4],
          [0, 1, 3, 8, 5, 4, 7, 6, 2, 9],
          [5, 4, 7, 6, 2, 9, 0, 1, 3, 8],
          [2, 9, 0, 1, 3, 8, 5, 4, 7, 6],
          [3, 8, 5, 4, 7, 6, 2, 9, 0, 1]
        ];
        matSz = 10;
      break;
      case "hatchleft4x4":
        bM = [
          [1, 0, 1, 2],
          [2, 1, 0, 1],
          [1, 2, 1, 0],
          [0, 1, 2, 1]
        ];
        matSz = 3;
      break;
      case "hatchright4x4":
        bM = [
          [2, 1, 0, 1],
          [1, 0, 1, 2],
          [0, 1, 2, 1],
          [1, 2, 1, 0]
        ];
        matSz = 3;
      break;
      case "hatchhorizontal4x4":
        bM = [
          [2, 2, 2, 2],
          [1, 1, 1, 1],
          [0, 0, 0, 0],
          [1, 1, 1, 1]
        ];
        matSz = 3;
      break;
      case "hatchvertical4x4":
        bM = [
          [2, 1, 0, 1],
          [2, 1, 0, 1],
          [2, 1, 0, 1],
          [2, 1, 0, 1]
        ];
        matSz = 3;
      break;
      case "kallebach":
        bM = [
            [
              [ 172,  40, 126, 240, 213,  72,  49, 171,  94, 207,  69, 153, 251,  17,  96, 166, 222, 106,  47, 158, 224,  14, 138, 239,  36, 192, 168,  99, 116, 200,  37, 237],
              [  84,  23, 193,  56,  12, 140, 226, 146, 126, 242,  25,  53, 194, 118, 186,  58,  24, 253, 203,  92,  60, 114, 194,  55, 153,  82, 228,  11, 216, 253,  83,  74],
              [ 232, 147, 101, 166,  86, 203, 189,  64,   8, 179, 107,  81, 139,   1, 237, 146, 133,  75,   7, 128, 191, 244,  97, 211,  71,  23, 129, 144,  43, 150,   6, 124],
              [ 210, 114, 248,   1, 113,  31, 255, 104,  41, 220, 199, 150, 226,  41, 206, 102,  33, 177, 239, 169,  27,  42, 123,   3, 159, 248, 197,  52,  95, 182, 164, 220],
              [  76,  16, 217, 186, 120, 230,  21,  77, 212, 115,  16,  30, 171, 123,  86, 163, 197,  95, 215,  80, 107, 149, 183, 223, 110, 177,  65, 205, 236,  24, 108,  61],
              [ 150,  53,  93, 206,  43, 131, 180, 162, 151, 133, 191,  93,  58, 215,  46, 225,  45, 119,  16, 161,  17, 252,  64,  46, 137,  31,  16, 120, 155, 134,  34, 201],
              [ 195,  29, 160,  68, 144,  58, 236,  96,   1,  51, 240, 176, 232, 143,  73, 136, 173,  64, 129, 196, 228, 175,  91, 207, 234, 102, 169,  87,  56, 225, 243,  79],
              [ 127, 247, 175, 225, 107,  12, 170, 200,  68, 250,  38,  83, 112,  10, 184,  28, 248, 208,   2,  34,  53, 142, 109,  10,  77, 190, 255, 210,   4, 172, 100, 146],
              [   7,  98,  78,  39, 189, 243,  85,  30, 139, 120, 123,  21, 158, 211,  99, 122, 162, 113, 185,  75,  98, 238,  20, 181, 127,  25, 143,  71, 111,  47, 187,  11],
              [ 219, 166, 118,  23, 133,  69, 222, 108, 239, 183, 207, 224,  72, 199,  37,  63,  85, 223,  57, 152, 213, 165,  52, 221, 154,  45, 200, 162,  92, 216, 251, 130],
              [  63, 141, 229, 195,  55, 154, 100,  44, 165,  10, 148,  49, 171, 112, 254, 235,  18, 105, 243,   0, 201, 122,  66, 249, 116,  62, 227,  15, 135,  32,  67, 193],
              [ 185,  48,  75, 255, 176, 214,  18, 184,  81,  59,  97,  29, 132,   2, 161, 147, 138, 177,  10, 152,  29,  83, 141,   4,  96,  39, 239, 105, 180, 233, 157,  22],
              [  12, 159, 111,  88,   1, 116,  66, 203, 128, 231, 197, 215, 247,  91,  79,  50, 187, 115,  92, 215, 230,  48, 176, 194, 216, 188, 122,  78,  54, 147, 106,  86],
              [ 128, 240, 210,  30, 234, 168, 143, 250, 160,  17, 105, 154, 179,  66, 204,  33, 240,  71,  39, 182, 131, 106, 245,  34,  73, 148, 167, 253,   7, 202,  42, 242],
              [ 198,  38, 101, 150, 130,  46,  93,  23,  35,  57, 136,  85,   0, 124, 136, 221, 102, 249, 148,  70,  81,  15, 204,  88, 125,  60,  28, 208,  69, 119, 176, 217],
              [  85, 167,  20,  57, 252, 190, 221, 109, 188, 201, 245,  45, 192, 226,   9, 172,  24, 156,   4, 212, 164,  27, 154, 170, 241,  13, 223, 130,  97, 231,  18,  60],
              [ 108, 218, 181, 117, 158,  11,  79, 153, 233,   2,  73, 168, 209,  54, 145, 117,  59,  86, 193, 127, 235,  56,  98, 220, 112,  48, 180, 157,  36, 188, 163, 135],
              [   6,  61, 246,  89, 204, 137,  38,  97, 174, 144,  28, 114,  94, 103, 184,  71, 241, 225,  36, 125,  50, 252, 188,  40, 137, 194,  91, 249, 107,   3,  83, 205],
              [ 229, 139,  70,  43,  27, 186, 241,  68, 122, 222,  46, 135, 236,  19, 161, 222,  26, 134,  76, 195, 105, 141,  80,   6,  67, 238,  22, 143,  50, 216, 241,  28],
              [ 175,  95, 167, 126, 214, 102, 229,  17,  53, 254, 181, 208,  62,  37, 199, 126,  47, 149, 173,  14, 228,  21, 213, 198, 146, 121, 206,  55, 174, 117, 152,  89],
              [  51,  13, 202, 148,  59,  80, 180, 157, 192,  76,   9, 152,  78, 244,   5, 174, 212,  95,  63, 237, 117, 159,  60, 178, 103,  43,  76,  32, 224,  64, 191, 140],
              [ 161, 119, 238,  20, 253,  45, 113, 141,  32, 110, 127, 202, 170, 140, 115,  82,  34, 251, 183,   6,  94,   0, 132, 245,  14, 231, 182, 156, 131,  40,  18, 247],
              [  65, 211,  36, 198, 219, 134,   3, 223, 246, 163,  88,  40,  25,  90, 252,  52, 160, 108, 137, 218, 153, 202, 111,  35, 165, 124, 217,  92, 255, 168,  73, 110],
              [ 192,  82, 106,  90, 155,  72, 209,  61,  19, 234,  55, 226, 211, 132, 190, 171, 233,  19,  42,  54, 166,  88, 206,  72,  51, 196,  82,  26, 103, 235, 205,  48],
              [ 236,   7, 142, 243,  52, 121, 169,  99, 187, 145, 104, 173,  65,  13,  69,   8, 100, 204, 124, 227, 210,  26, 191, 237, 140,   3, 151,  67,   9, 186,  84, 156],
              [  44, 131, 200,  27, 185, 232,  11, 203,  90, 129,  31, 196, 118, 136, 238, 145, 218,  30,  91,  67, 104,  12, 121, 169,  98, 250, 198, 213, 164, 138,  33, 218],
              [  74, 177, 214,  84, 160,  39, 112, 249,  49,   5, 214, 158,  24, 184,  80, 244,  58, 157, 175, 235, 142,  81,  62,  38, 228,  14, 115,  41, 232,  59,  20, 118],
              [ 227, 114,  19, 254, 101,  68, 135, 149, 179,  70, 242,  87,  56, 201,  37, 120,   0, 207, 113, 189,  49, 182, 248, 156,  87,  29, 178,  78, 144,  94, 250, 174],
              [ 151,  32,  96, 189,   5, 208, 230,  22, 164,  99, 190,  47, 147, 224, 178, 163, 103,  75,  21, 133,   4, 221, 199, 134, 109, 165, 242, 129,   2, 209, 196,  74],
              [ 178,  61, 145, 125, 233,  57, 195,  79, 220, 119, 254,  15, 110,  93,  50,  66, 230, 193,  41,  90, 212, 101,  22,  54, 205,  70, 219, 104,  51, 151, 111,  35],
              [  77, 247, 219,  44, 173,  89, 109,   8,  35, 138,  42, 170, 209, 244, 128,   5, 217, 139, 245, 167,  63, 149, 123, 179,  44,   8, 187,  26, 172, 246,  15, 227],
              [ 197,   9, 100, 162,  25, 130, 246, 155, 185,  65, 231, 121,  74,  33, 183, 155,  84,  13, 116, 181,  31, 229,  77, 251, 142,  89, 234, 125,  62, 159,  87, 132]
            ],
            [
              [ 185,  22, 140, 215,  92, 182,  66, 125, 222,  95,   7, 193, 153, 108,  24, 174, 236,  57,  98, 205,  49, 136, 169,  33, 110, 241,  50, 173,  78, 221,  44, 157],
              [ 105,  57, 241, 201,  15,  34, 251, 199,  79, 163, 240,  54,  46, 210,  77, 118, 140,  28, 161, 251,   8,  92, 216,  63, 192,  17,  96, 212, 133, 114,  64, 250],
              [ 168,  38, 130,  72, 117, 165,  49, 141,  22, 175, 114, 134, 227,  88, 196, 250,  43, 222, 186, 108, 124, 197, 154,  13, 150, 131, 239, 165,  33, 202,  11, 101],
              [ 206, 231,   7, 195, 149, 225, 107,   5,  55, 211,  67,  30, 201,  17, 160,   6, 101,  64,  87, 143,  40,  59, 115, 227, 207,  73,   0,   5,  91, 162, 187, 142],
              [  17,  86, 254, 101, 176, 237,  88, 187, 243,  99, 149, 255, 124,  93,  69, 248, 171, 203,  19, 213, 190, 245,  75,  25,  83, 181, 117, 144, 218,  82, 121,  26],
              [ 139, 184,  50,  62,  27,  42, 129, 158, 219, 122,  14, 180,  41, 218, 187, 135, 117, 237,  48, 132, 158,   3, 178, 138,  76, 244, 209,  63, 225,   8, 179, 238],
              [  71, 118, 155, 217,  83,  18, 203,  70,  27,  61, 233, 165,  80, 143,  26,  57,  35, 152,  96, 233,  69,  31, 223, 104, 200,  12, 127,  41, 191, 109,  56,  46],
              [ 198, 232,   5, 135, 171, 146, 223, 113, 180, 138,  45, 193,  51, 111, 225, 194,  11,  81, 163,   0, 122, 104, 169, 237,  22, 155, 173,  89,  21, 135, 158, 212],
              [  29, 165, 245, 105, 191, 252,  56,   9, 230,  85, 106, 214,   4, 156, 241, 120, 250, 149, 185, 228, 199,  53, 147,  65,  48, 249,  97, 184, 253, 226,  67,  90],
              [  58,  90,  69,  23, 123,  36,  76, 162, 209,  32, 248, 173, 129,  89,  16,  75, 177,  23,  87,  44,  95,  37, 211, 182, 116,  51, 141,  33,  77, 167,  36, 148],
              [ 226, 132, 179,  45, 234,  95, 184, 109, 127, 150,  20,  99, 189,  38, 171, 130, 210,  62, 141, 238, 136, 244,  10,  80, 131, 220,   2, 206, 123,  14, 194, 239],
              [ 116, 209, 150,  99, 202, 137, 244,   4, 195, 240,  70, 141, 228, 205,  55, 219, 105,   3, 100, 170, 156, 115, 196, 178,  24, 213, 164, 102,  59, 231, 112,  74],
              [ 170,   8, 254,  52, 167,  13, 153,  90,  46, 212,  42, 116,   9, 162,  65, 151,  35, 201, 224,  17,  30, 226,  98,  58, 239,  42, 150,  85, 204, 174, 133,  25],
              [  76,  34,  82, 220,  62,  29, 207,  67, 121, 172,  58, 183,  97, 255,  28, 191, 233,  79, 180, 125,  47,  86,   0, 145, 112,  72, 127, 252,   7, 157,  50, 215],
              [ 140, 195, 158, 122, 238, 189,  84, 253, 225, 159,  23, 234, 131,  83, 114,  19, 143,  73, 112, 246, 198, 160, 187, 232, 169,  12, 181,  30, 224,  40,  95, 249],
              [ 246,  91, 110,  43, 145, 106, 178,  51, 147,  11, 108, 197, 216,  44, 177, 243,  92, 166,   9,  60,  70, 104,  37, 120, 242,  94, 194, 137, 109,  67, 183, 145],
              [  14, 185, 212,   5, 229,  20, 128,  36,  77,  93, 247,  55, 153,   3, 208, 123, 196,  52, 217, 149, 229, 207,  74,   2,  52, 203, 231,  61, 205, 166, 120,  27],
              [  64, 103, 134, 198, 172,  73, 164, 221, 200, 176, 118,  33,  69, 139,  81, 103,  31, 133, 183,  42,  21, 176, 164, 217, 152,  22,  80,  44, 248,  16,  88, 215],
              [ 125, 236,  30,  45, 247,  97,  59, 241, 136, 211,  18, 188, 230, 252, 157, 220,  15, 235,  99,  82, 250, 126,  66,  91, 111, 132, 188, 100, 126, 191, 235, 155],
              [ 161, 181, 216,  78, 154, 119,  28, 107,  43,  63, 161, 128,  91, 170,  10,  61, 201, 245, 173, 117,  56,  31, 199,   9, 254, 208, 161,   1, 143,  55,  35,  72],
              [   7,  93,  56, 111,  12, 210, 183, 147,   4,  83, 236, 104,  50,  40, 113, 146, 128,  47,   2, 206, 139, 239, 105, 192,  49,  78,  31, 222, 237, 170, 113, 132],
              [ 229, 202, 144, 255, 194,  84, 226, 252, 169, 217, 192,  26, 178, 205, 235,  77,  94, 166,  68, 154, 220,  59, 182, 119, 228,  96, 177,  88,  68, 200,  20, 221],
              [  80, 122,  36, 166,  68,  20,  52, 115,  75,  34, 138, 224,  70, 156, 190, 215,  21, 228, 109,  38,  87,  16, 235,   1, 148,  19, 136, 247, 151,  43,  79, 249],
              [ 175,  24, 188, 130, 238, 103, 139, 202, 126,  94,  19, 151, 120,  86,   2,  62, 134, 186, 197, 248, 174, 124,  73, 114, 167, 214,  66,  53,   8, 184,  98, 144],
              [ 100, 221,  61,   4, 213, 179,  41, 233,  10, 175, 246, 208,  39,  54, 172, 255,  32, 118,  51, 146,  25, 190, 209,  39, 243,  25, 107, 192, 164, 251,  60,  29],
              [ 242, 140, 112, 157,  90,  29, 152, 249,  57, 160,  98, 130, 243, 107, 198, 100, 142, 223,  81,  10, 102, 242, 137,  78, 156, 127, 229,  37, 204, 121, 218, 175],
              [  11,  53, 206, 245,  74, 123, 219, 110,  84, 196,  26,  64, 185,  92, 159,  18, 240,  41, 177, 219, 163,  32,  85,  48, 172,  58, 145,  75,  85, 133,  49, 111],
              [ 189,  86,  39, 168, 195,  15,  65, 186, 137,  46, 227, 167,  14, 232,  48, 125, 189, 152,  71,  94, 128,  63, 232, 181, 216,   0, 101, 236, 154,  68,  16, 162],
              [ 147, 234,  23, 135, 102,  47, 231, 171,  39, 213, 102, 148,  34, 218,  76, 207,  60,   1, 110, 200, 253,  15, 153,  40, 106, 197,  13, 174,   1, 240, 188, 211],
              [  66, 121, 204, 180, 253, 151,  89, 129,  71, 254, 119,  81, 179, 113, 138,  27,  84, 230, 214,  37, 182, 116, 142, 247,  71, 134, 222, 119, 203, 106,  35,  87],
              [ 193,  45,  79,   6,  60,  32, 242, 210,   3, 190,  54, 246, 204,   6, 168, 155, 244, 129, 146, 103,  53,  24, 208,   6,  89, 186,  28,  93, 251,  72, 126, 142],
              [ 214,  97, 160, 224, 115, 176, 108,  12, 144, 159,  18, 131,  65, 223,  96,  38, 199,  74,  13, 193, 159, 227,  82, 124, 163, 234,  47, 148,  21, 168, 230,  54]
            ],
            [
              [ 175,  21, 137, 238,  18, 201, 170,  68, 165, 240, 100,  31, 126, 173,  22, 210,  47, 153, 223,  19,  44, 239, 169,  60, 114, 250,  14, 175,  46, 133, 185, 214],
              [  54, 109, 209,  88, 148,  38,  83, 112,  23, 213,  74, 152, 194, 231, 101, 248, 137, 116,  62, 199, 134, 150, 100,  26, 215, 144, 107, 196, 228,  67,   8,  63],
              [ 196,  73,  33, 228, 120, 191, 219,  35, 130, 181,  50, 252,  61,  67,  41,  80, 177,  79,  33, 253,  90,   7, 232, 189,  94,  39,  77, 159,  97, 147, 249,  90],
              [ 247, 183, 158,  48,   7, 100, 254, 142,  56, 225, 123,   8, 145, 110, 202, 166,   2, 236, 185, 159, 122, 175,  72, 209, 129, 200,  52, 244,  23,  32, 109, 157],
              [  92, 143, 107, 131, 243, 166,  76, 195, 155,   2, 207,  88, 189, 240,  25, 152, 217,  82,  17, 106, 221,  57, 110,  19, 163,   4, 218, 184, 137, 191, 223, 206],
              [  13,  42, 235,  64, 203,  28,  15,  91, 236, 103, 136, 174,  14, 118,  54, 182,  69, 126, 141,  48, 193,  36, 248,  86, 142, 114, 236,  80,  95,  49, 128,  59],
              [ 174, 224, 193,  83, 116, 179, 138, 251,  47,  67,  25, 247,  96,  80, 209,  94,   0, 198, 171, 232,  87, 152, 227, 204, 180,  69,  46, 119, 170, 253, 106,  14],
              [ 123,  71, 149, 164,  38, 233,  52, 124, 168, 211, 112, 195, 231, 162, 142, 222, 111,   9, 242,  75, 131,   3,  99, 124,  12,  31, 155, 211,   6,  39, 180, 239],
              [ 207,  25,  55,  97,   2, 201, 105, 188,  11,  84, 151,  59,   1,  49,  35, 226, 179,  58,  45, 162,  29, 187,  60, 169, 217, 251, 197,  62, 229, 117,  74, 154],
              [ 104, 245, 221, 133, 194, 156,  78, 144, 241,  32, 245, 184, 129, 101, 176,  19,  81, 153, 220,  98, 210, 253, 113,  25,  54, 144, 108,  23, 186, 140, 214,  93],
              [  45, 182,  15, 171, 216,  65,  21,  43, 227,  96,  41,  73, 145, 215,  29, 237, 134, 206, 119,  17,  70, 156, 140, 241, 192,  78, 130,  69, 163,  48, 202,  27],
              [ 144,  81, 117,  33,  90, 255, 119, 205, 135, 161,  16, 197, 222, 114,  55, 168,  66,   3, 195, 147,  34, 229,  50, 121,  40, 226,   5, 245,  89, 235,  13, 134],
              [ 208, 167, 240,  51, 129, 178, 150,  58, 187,  70, 202, 107,   0,   9, 121, 192, 249, 108,  88, 239, 185,  85,  10, 181, 102, 206, 173, 151,  36,  83, 250, 172],
              [   2,  63, 142, 213,  11,  71,  28,  99, 249,   1, 125, 235, 158, 183,  87, 228,  42, 160,  27, 171, 124, 219, 136,  63, 160,  26, 110, 220, 196, 122, 102,  59],
              [ 133,  95, 230, 189, 108, 234, 203, 218,  50,  85, 172,  63,  80, 206,  94,  17, 127, 225,  37,  74,  58,  20, 198, 249, 234,  73,  93,  57, 165,  24, 188, 223],
              [ 175,  38,  21, 159,  86,  43, 164, 132, 115, 143, 211,  32,  22, 219, 151,  76, 190, 102, 212, 253, 113, 166,  99, 147,  46,  13, 132, 255, 141,  79, 161,  40],
              [ 246, 115, 199,  53, 122, 243,  16,  77,   9, 229, 176, 105, 240, 131, 170, 202,  50, 139,  64, 152, 237,  39,   5, 184, 116, 177, 193, 208,   7,  49, 243, 111],
              [  81,  68, 225, 104, 188, 218,  97, 170, 191,  37,  91, 157,  53,   3,  68,  35, 118, 244,  10,  93, 204, 174,  55, 242,  86, 226,  36, 101, 231, 150,  28, 182],
              [   9, 126, 168,  30,   1, 139,  62, 149, 252, 121,  68, 196, 162, 111, 212,  85, 233, 163, 178,  47,  81, 127,  66, 140,  29, 153,  20, 125,  62, 200,  91, 132],
              [ 212, 186, 150, 254, 112, 179, 241,  24,  53, 222, 137,  27, 225, 254, 145, 184,  58, 130,  33, 194,  16, 224, 214, 107, 205, 248,  79, 172, 161, 252,  13,  71],
              [ 229,  41,  92, 233,  45,  66, 160,  87, 110, 237,  18,  42,  82, 124,  21,  98,  44, 248, 109, 216, 146,   0, 163,  11,  51,  96, 143,   5,  84,  44, 213, 222],
              [ 103,  57,  17, 135,  79, 208, 128,  34, 201, 157, 182, 148, 214,  70,  10, 159, 221,  76,   4,  95, 156, 123,  72, 177, 135, 185, 234, 216, 112, 192,  96, 122],
              [ 164, 179, 119, 204, 191,  10, 173, 219,   3,  75,  56, 104, 199, 115, 205,  88, 176, 139, 189, 235, 210,  61, 230,  86, 198,  14, 127,  65,  31, 138,  54, 153],
              [   1, 149, 223,  28,  52, 245, 118,  61, 146, 132, 251,  15, 244,  37, 172, 232,  18, 125,  30,  53, 113,  20,  36, 246,  24, 155,  43, 246, 166, 207, 178,  22],
              [ 197,  70, 251, 115, 102, 156,  19, 209,  46, 190,  30, 162,  91,  49, 135,  73, 186,  64, 241, 165, 136, 221, 193, 145, 116,  75, 105, 192,  93,   8,  72, 217],
              [  98, 129,  40,  84, 183, 140, 198,  95, 233, 114, 227, 125, 218, 154, 238, 106,   0, 146, 200,  12,  87, 101, 169,  57, 238, 224, 211,  34, 134, 242, 149, 104],
              [ 190,  12, 208, 169, 230,  71,  37,  83, 167,  12,  78,  65, 178,   4,  85, 212, 120, 227, 108,  48, 154, 252,  31,  77,   5, 139, 176,  51, 255, 117,  41, 167],
              [ 236,  59, 154,  24, 215,   4, 126, 255, 181, 138, 242, 201,  99,  20, 171,  55,  42,  92, 217, 183,  74, 204, 128, 186, 158,  97,  22,  82, 155,  66, 188,  56],
              [  45, 143,  89, 133, 244,  56, 100, 148,  26,  65, 106,  39, 147, 250, 234, 194, 160,  82, 173,  34, 117, 231,  18,  69, 226, 243, 109, 200, 216, 128,  26, 239],
              [ 103, 254, 195,  77, 111, 158, 174, 228,  51, 215, 157, 187,  75,  61, 113, 130,  23, 247, 138,   6,  60, 146, 105,  40, 197, 121,  60, 165,   6, 230,  89, 210],
              [ 168,   7, 224,  29,  43, 203,  16, 190, 118,   6,  90, 232,  44, 141, 180,  11,  67, 199, 123, 237, 164, 250, 213,  52, 177,  47,   8, 246, 141, 103,  30, 120],
              [ 203,  64, 120, 181,  94, 238, 136,  35,  78, 247, 167, 127,  32, 220,  89, 207, 151,  38,  98, 187,  84,  27, 131,  92, 220, 148,  76, 205,  72, 180,  15, 161]
            ],
            [
              [ 137, 241,  39, 152, 214, 191,  88, 224,  22, 182,  87, 150,  27, 173,  71, 123, 184,  25,  65, 178,   8, 238,  34, 209, 100, 176,  66, 194, 213,  43, 117, 245],
              [  23,  75, 127, 103,  14,  65, 141, 118,  47, 244, 128, 212, 237, 103,  46, 239, 205, 223, 135,  92, 114, 153,  58, 121, 252, 145,  19,  91, 237, 108,  11,  96],
              [ 231, 180, 203,  56, 177,  34, 239, 206, 164,  75, 105,   8, 195, 159,  17, 139,  54,  88, 164, 253, 219, 195, 110, 166,  12,  49, 130, 161,  35, 175, 150, 220],
              [ 116, 159,   7, 220, 246, 102,  78,   5,  54, 173,  39, 115,  57, 225, 188,  76,   6, 149,  37,  47,  84,  18,  24,  75, 187, 225, 201,   5,  81, 189,  25,  63],
              [  42,  91, 107,  70, 197, 166, 134, 152, 192, 227, 255, 146,  67, 131, 249, 170, 120, 232, 199, 104, 129, 172, 211, 244,  40,  79, 118, 248, 140, 238, 200, 128],
              [ 193, 254,  29, 141,  48,  19, 248,  37, 110,  89,  29,  98, 178,  22,  41,  92, 247, 186,  58, 123, 179, 230,  62, 155, 137, 217, 172,  60,  21,  76, 112,  43],
              [ 132, 217, 168, 122, 227,  94,  62, 209, 124,  15, 216, 163, 203, 105,  51, 129,  70,  28, 212, 144,  33,   3, 102, 127,  28,  11,  99, 149,  52, 181, 158, 249],
              [  80,  17,  61, 204,  85, 215, 131, 170, 235,  49, 139,  77,   4, 220, 172, 194, 155,  11,  96,  79, 160,  53, 229, 202,  89, 253, 190, 209, 125, 222,  65,  86],
              [ 233, 187, 113,  44, 156, 183,  74,   9, 103, 154, 239, 186,  59, 250, 107,  15, 226, 141, 240, 206, 221, 115, 167, 182, 111,  44,  73,  93, 236,   7, 211, 167],
              [  35, 101, 145, 243,   5, 112,  27, 252, 197,  69,  34, 118, 132, 149,  32, 122, 185,  42, 109,  22,   0, 148,  41,  17, 197, 142, 164,  30, 131,  38,  81, 142],
              [  53, 224, 199,  24, 175, 231,  57, 145,  85, 245,  20, 160,  45, 199,  66,  73, 211, 164,  60, 136, 189,  70, 242,  86,  55, 244, 214, 102, 154, 193, 106,  14],
              [ 178, 162,  71,  88,  97, 136, 191, 120, 222, 169,  93, 207, 218,  87, 233, 244,  99,   3, 238,  91, 175, 130,   9, 155,  97, 179,   2,  23, 203,  69, 216, 251],
              [ 140, 122,   8, 207, 218,  13, 160,  40,   4, 107, 143,   9, 180,   0, 157,  51,  19, 147, 194,  49, 214, 230, 204,  25, 120, 222,  66, 117, 228, 174,  54,  26],
              [  33, 239,  99, 151,  61, 249,  83, 184,  52, 229,  74, 192, 127,  81, 136, 113, 179, 221,  69, 119,  33, 108,  82, 169,  39, 186, 140,  78,  42, 126, 188, 112],
              [ 211,  77,  47, 189, 128,  32, 201, 132, 152, 255,  24, 101, 170, 247,  30, 163,  91,  80, 251,  17, 185, 143,  61, 236, 195,  51, 250, 165, 147,   6,  93, 233],
              [ 117, 157, 171, 228, 109,  53, 237, 114,  90, 209,  36,  60, 215,  49, 225, 205, 236,  38, 134,  68, 159, 247,   2, 133,  74,  12, 210,  88, 242, 219,  52, 154],
              [  66,  18, 253,   5,  73, 222,  20, 175,  11, 166, 198, 121, 153,   3,  64, 106, 124,   9, 168, 200,  96,  31, 117, 193, 100, 157, 111,  32,  99, 177,  72, 202],
              [ 196, 137,  90, 178, 147, 162,  98,  68,  46, 139,  80, 234, 183, 132,  78, 191, 146,  57, 226, 210,  45, 217, 173, 153, 228,  40, 255,  62, 198,  16, 133,  36],
              [ 238,  38, 218,  80,  28, 197, 214, 245, 188, 241, 108,  18,  95,  35, 212, 201,  25, 174, 110,  73,  21, 129,  86,  59,  21, 124, 180, 143, 235, 118,  84, 249],
              [ 101,  56, 123, 251, 105,  63, 135,  87, 156,  30,  54, 196, 168, 253, 116, 100,  43,  82, 241, 149,   0, 204, 235,  10, 206,  79, 215,   1,  57, 221, 169, 147],
              [ 208,   7, 166, 144, 229,  12,  40, 119,   4, 254, 144, 223,  89,  10,  55, 179, 213, 137,   2, 183, 142, 161, 101, 243, 165, 135, 106,  94, 158,  46, 191,  22],
              [ 185, 156,  72,  47, 205, 169, 224, 184,  55, 176, 126,  70,  46, 207, 151,  19, 122, 231,  94,  36,  60,  50,  15, 113,  28,  64, 232, 172,  31,  92,  69, 110],
              [  32, 231, 114,  23,  95, 128, 150,  76, 235, 100,  20, 159, 246, 134,  79, 162,  29,  67, 190, 223, 125, 232, 196,  76, 155, 201,  16, 188, 250, 127, 243, 206],
              [  85, 130, 240, 195, 213,  68,  26, 111, 208, 138,  63,  33, 186, 109, 228, 200, 146, 185,  50, 243, 167,  85, 174, 219, 254,  44,  84, 145, 217,   8, 138,  45],
              [ 226,  41, 173,   4,  82, 248, 189, 162,  10, 241, 193, 219, 120,  41,  71,  97,   0, 113,  10, 151,  24, 104,  37,  67, 130,  98, 119,  37, 104, 181,  78, 163],
              [ 148, 105,  56, 158, 141, 102,  48, 124,  38,  81,  94, 174, 144,   2, 215, 236, 171, 240, 106,  72, 248, 190, 138,   1, 182, 208, 165, 229,  59, 198,  20, 232],
              [  13, 245, 190,  31, 218,  16, 199, 230, 153, 205,  50,  18, 207,  87, 157,  16,  82, 131, 198,  43, 210,  56,  89, 237, 150,  72,  26, 192, 135, 154,  48,  92],
              [ 203,  96, 125,  63, 115, 171,  90, 255,  68, 133, 116, 167, 251,  77, 183, 123,  27, 220, 177,  95, 158,  14, 116, 223, 194,  52,  12, 242, 115,  64, 212, 126],
              [ 138,  27, 252, 182, 234,  55, 146,  26,   3, 181, 225,  29,  58, 196, 136,  48, 233,  61,   1, 142, 121, 227, 171,  31, 107, 125,  95, 176,   1, 252,  30, 170],
              [  74, 165,   6,  83, 134, 224,  75, 109, 210,  59, 247, 126, 104,   7, 226, 148,  71, 187, 111,  36, 254, 200,  64,   6, 161, 250, 216, 148,  67, 202, 108, 227],
              [ 221, 112, 208, 152,  42,  13, 168, 192, 156,  97, 143,  44, 161, 242,  35,  93, 163, 246,  51, 213,  77, 103, 129,  45, 204, 140,  39, 119,  83, 160,  15,  53],
              [ 176,  50,  65, 187,  98, 246, 121,  34, 234,  14,  84, 177, 216,  62, 114, 202,  13, 133,  83, 184, 151,  23, 234, 180,  86,  58, 230,  21, 181, 240,  90, 139]
            ]
        ];
        matSz = 256;
      break;
      case "threshold":
        matSz = 2;
        bM = [[1]];
    }
    expr = parseMatRev(JSON.stringify(bM));
    gId("errDiffsMatInput").value = expr;
    gId("errDiffsDivInput").value = matSz;
 } else if (dropdown.value === "arithmeticcustom") {
    let a = dropdownArith.value;
    let expr = "";

    if (a.startsWith("arithmetic")) {
      expr = localStorage.getItem(a);
      gId("arithmeticInput").value = expr;
    }

    switch (a) {
      case "arithmeticAdd":
        expr = `(((x + c * 67 + y * 236) * 119) & 255) / 255`;
        break;
      case "arithmeticAddConv":
        expr = `((x + y * 237) * 119 & 255) / 255`;
        break;
      case "arithmeticSub":
        expr = `(((x - c * 67 + y * 236) * 119) & 255) / 255`;
        break;
      case "arithmeticSubConv":
        expr = `((x - y * 237) * 119 & 255) / 255`;
        break;
      case "arithmeticXor":
        expr = `(((x + c * 17) ^ y * 149) * 1234 & 255) / 255`;
        break;
      case "arithmeticXorConv":
        expr = `(((x ^ (y * 149)) * 1234) & 255) / 255`;
        break;
      case "halftone":
        expr = `(A * sin(k * (x + y)) + A * sin(k * (x - y))) / 255`;
        break;
    }

    gId("arithmeticInput").value = expr;

  } else if (dropdown.value === "errdiffscustom") {
    let a = dropdownErrDiffs.value;
    let expr = "";

    if (a.startsWith("errDiffs")) {
      expr = localStorage.getItem(a);
      gId("errDiffsMatInput").value = expr;
    }

    switch (a) {
      case "floydsteinberg":
        expr = `-, x, 7/\n3, 5, 1`;
        break;
      case "falsefloydsteinberg":
        expr = `x, 3/\n2, 3`;
        break;
      case "fan":
        expr = `-, -, x, 7/\n1, 3, 5`;
        break;
      case "shiaufan":
        expr = `-, -, x, 4/\n1, 1, 2`;
        break;
      case "shiaufan2":
        expr = `-, -, -, x, 8/\n1, 1, 2, 4`;
        break;
      case "atkinson":
        expr = `-, -, x, 1, 1/\n-, 1, 1, 1/\n-, -, 1`;
        break;
      case "burkes":
        expr = `-, -, x, 4, 2/\n1, 2, 4, 2, 1`;
        break;
      case "javisjudiceninke":
        expr = `-, -, x, 7, 5/\n3, 5, 7, 5, 3/\n1, 3, 5, 3, 1`;
        break;
      case "stucki":
        expr = `-, -, x, 8, 4/\n2, 4, 8, 4, 2/\n1, 2, 4, 2, 1`;
        break;
      case "sierra":
        expr = `-, -, x, 5, 3/\n2, 4, 5, 4, 2/\n-, 2, 3, 2`;
        break;
      case "sierralite":
        expr = `-, x, 2/\n1, 1`;
        break;
      case "sierra2":
        expr = `-, -, x, 4, 3/\n1, 2, 3, 2, 1`;
        break;
      case "box":
        expr = `-, x, 1/\n1, 1, 1`;
        break;
      case "diagonal":
        expr = `-,x,5/\n2,3,6`;
        break;
      case "pigeon":
        expr = `-, -, x, 2, 1/\n-, 2, 2, 2/\n1, -, 1, -, 1`;
        break;
      case "kist":
        expr = ` -,  -,  x, 90,  -/\n10, 20, 30, 20, 10/\n10,  5, 10,  5, 10`;
        break;
      case "arce":
        expr = `-,  -,  -,  x, 32/\n6, 13, 10, 19, 10, 18,  8/\n-,  -, 12, 26, 12/\n3,  6,  4,  8,  4,  7,  2`;
        break;
      case "xot":
        expr = `-, -, -, -, -, x, -, -, -, -, -, 4, 4,/\n-, -, -, -, -, -, -, -, -, 7, 7, 7, 7,/\n-, -, -, -, -, -, -, -, 4, 7, 7, 7, 7, 4,/\n-, -, -, -, -, -, -, -, 4, 7, 7, 7, 7, 4,/\n-, -, 2, 2, -, -, 3, 3, -, 7, 8, 8, 7,/\n-, 3, 3, 3, 5, 6, 5, 5, 5, 7, 5, 5, 4,/\n2, 3, 3, 3, 7, 6, 5, 5, 4, 6, 1, 1, 1,/\n2, 3, 3, 3, 7, 6, 5, 5, 4, 6, 1, 1, 1, 1,/\n-, 3, 3, 3, 5, 6, 5, 5, 5, 5, 1, 1, 1, 1,/\n-, -, 2, 2, -, -, 3, 3, -, -, -, 1, 1`;
        break;
      case "twod":
        expr = `x, 1/\n1`;
        break;
      case "oned":
        expr = round(random()) ? (expr = `x, 1`) : (expr = `x/\n1`);
        break;
    }
    gId("errDiffsMatInput").value = expr;
    ({ wt, offs } = errDiffsConv(gIdV("errDiffsMatInput")));
    offslength = offs.length;
    div = gId("autoDiv").checked ?
    wt.reduce((sum, v) => sum + (v ?? 0), 0) :
    pFl(gIdV("errDiffsDivInput"));
    gId("errDiffsDivInput").value = div;

  } else if (dropdown.value === "varerrdiffscustom") {
    let a = dropdownVarerrdiffs.value;
    let expr = "";
    if (a.startsWith("varErrDiffs")) {
      expr = localStorage.getItem(a);
      gId("coefficientsInput").value = expr;
    }
    switch (a) {
      case "ostromoukhov":
        expr = ostro_coeffs;
        break;
      case "zhoufang":
        expr = zhoufang_coeffs_fixed;
        break;
    }
    gId("coefficientsInput").value = expr;
  }

  if (video.paused) process();
}


function populatePreset() {
  let container = gId("presetCheckboxes");
  container.innerHTML = "";

  for (let i = 0; i < localStorage.length; i++) {
    let key = localStorage.key(i);
    let checkboxContainer = document.createElement("div");

    let checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.id = key;
    checkbox.value = key;

    let label = document.createElement("label");
    label.setAttribute("for", key);
    label.textContent = key;

    checkboxContainer.appendChild(document.createElement("br"));
    checkboxContainer.appendChild(checkbox);
    checkboxContainer.appendChild(label);
    container.appendChild(checkboxContainer);
  }
}

function delPresets() {
  let checkboxes = gId("presetCheckboxes").querySelectorAll('input[type="checkbox"]:checked');
  if (checkboxes.length === 0) {
    alert("Please select at least one preset to delete.");
    return;
  }

  if (confirm("Are you sure you want to delete the selected presets?")) {
    checkboxes.forEach(checkbox => {
      let presetName = checkbox.value;
      localStorage.removeItem(presetName);
      removePresetFromDropdown(presetName);
    });

    alert("Selected presets have been deleted.");
  }
  presets(); populateUserPresets(); populatePreset();
}

function removePresetFromDropdown(presetName) {
  let dropdownList;

  if (dropdown.value === "errdiffscustom") {
    dropdownList = dropdownErrDiffs;
  } else if (dropdown.value === "arithmeticcustom") {
    dropdownList = dropdownArith;
  } else if (dropdown.value === "varerrdiffscustom") {
    dropdownList = dropdownVarerrdiffs;
  }

  for (let option of dropdownList.options) {
    if (option.value === presetName) {
      dropdownList.removeChild(option);
      break;
    }
  }
}


gId("delPresets").addEventListener("click", delPresets);

window.addEventListener("load", populatePreset);

dropdownMatrix.addEventListener("change", () => {presets(); populateUserPresets(); populatePreset();});
dropdownArith.addEventListener("change", () => {presets(); populateUserPresets(); populatePreset();});
dropdownErrDiffs.addEventListener("change", () => {presets(); populateUserPresets(); populatePreset();});
dropdownVarerrdiffs.addEventListener("change", () => {presets(); populateUserPresets(); populatePreset();});
dropdown.addEventListener("change", () => {presets(); populateUserPresets(); populatePreset();});

gId("bnGen").addEventListener("click", function() {
  if (dropdownMatrix.value === "bluenoise") {
    bM = toRGBMat(bnCtx.getImageData(0, 0, bnCanvas.width, bnCanvas.height))
    gId("errDiffsMatInput").value = parseMatRev(JSON.stringify(bM));
  } else {
    bM = parseMat(gIdV("errDiffsMatInput"));
  }
});

function findHighest(matrix) {
  let highestValue = -Infinity;

  matrix.forEach(slice => {
    slice.forEach(row => {
      row.forEach(v => {
        if (v > highestValue) {
          highestValue = v;
        }
      });
    });
  });

  return highestValue;
}

function toRGBMat(f) {
  let {
    width,
    height,
    data
  } = f,
  rgbMatrix = [];

  for (let y = 0; y < height; y++) {
    let row = [];
    for (let x = 0; x < width; x++) {
      let
        i = (y * width + x) << 2,
        cl = data[i];
      row.push(cl);
    }
    rgbMatrix.push(row);
  }

  return rgbMatrix;
}

//custom buffers for error diffusion
function buffChg(w, h) {
  switch (gIdV("buffers")) {
    case "Int8Array":
      return new Int8Array(w * h << 2);
    case "Int16Array":
      return new Int16Array(w * h * 3);
    case "Int32Array":
      return new Int32Array(w * h * 3);
    case "Float32Array":
      return new Float32Array(w * h * 3);
    case "Float64Array":
      return new Float64Array(w * h * 3);
  }
}

gId("buff").addEventListener("change", () => {
  if (gId("buff").checked) {
    setDisp("bufferDisp", "block");
  } else {
    setDisp("bufferDisp", "none");
  }
});

gId("buffers").addEventListener("change", () => {
  buffChg();
  process();
});

//--------------------------------------------------------------------------------------------------------------------

function bayer(f) {
  let { data: d } = f,
  bM = parseMat(gIdV("errDiffsMatInput"));

  if (gId("autoDiv").checked) gId("errDiffsDivInput").value = matSz = findHighest(bM) + 1;
  else matSz = pFl(gIdV("errDiffsDivInput"));

  if (!Array.isArray(bM[0][0])) bM = [bM]; // force 3D

  let t = 255 / matSz;
  mY = bM[0].length, mX = bM[0][0].length,
  matrixCache = Array.from({ length: ceil(h / mY) }, () =>
    Array.from({ length: ceil(w / mX) }, () =>
      rnd ? bM[floor(random() * bM.length)] : bM[0]
    )
  );

  for (let c = 0; c < 3; c++) {
    let lvl = lvls[c];
    for (let i = 0; i < sqSz; i++) {
      let x = i % w, y = (i / w) | 0,
      bVal = (matrixCache[floor(y / mY)][floor(x / mX)])[y % mY][x % mX] * t / 255,
      j = i << 2,
      sRGB = d[j + c],
      cl = linr ? linearLUT[sRGB] * 255 : sRGB;

      d[j + c] = (floor(lvl * (cl / 255) + bVal) / lvl) * 255;
    }
  }
}


function arithmeticCustom(f) {
  const {data: d} = f,
  A = gId("aLvlsInput").value,
  k = gId("kLvlsInput").value,
  expr = gId("arithmeticInput").value,
  cp = new Function("x", "y", "c", "A", "k", `return (${expr})`);

  for (c = 0; c < 3; c++) {
    const lvl = lvls[c],
    b = lvl / 255;
    for (let y = 0; y < h; y++) {
      yOffs = y * w;
      for (let x = 0; x < w; x++) {
        i = (x + yOffs) << 2,
        sRGB = d[i + c],
        cl = linr ? linearLUT[sRGB] : sRGB,
        C = floor((cl * b) + cp(x, y, c, A, k)) / lvl * 255;
        d[i + c] = C;
      }
    }
  }
}

//--------------------------------------------------------------------------------------------------------------------

gId("errDiffsMatInput").addEventListener("input", function() {
  ({ wt, offs } = errDiffsConv(gIdV("errDiffsMatInput")));
  offslength = offs.length;
  div = gId("autoDiv").checked ?
  wt.reduce((sum, v) => sum + (v ?? 0), 0) :
  pFl(gIdV("errDiffsDivInput"));
  gId("errDiffsDivInput").value = div;
});

function diffs(width, rev, wt, c, mul, errC, offslength, pixelIndex, target) {
  for (let j = 0; j < offslength; j++) {
    const ox = offs[j][0];
    target[(pixelIndex + (rev ? -ox : ox) + (offs[j][1]) * width) * mul + c] += errC * wt[j];
  }
}

function errDiffsCustom(f) {
  const {data: d} = f,
  b = buffChg(w, h),
  target = buff ? b : d;
  gId("errDiffsDivInput").value = div;
  
  for (let c = 0; c < 3; c++) {
    const lvl = lvls[c], errLvl = errLvls[c],
    l = 255 / lvl, el = errLvl / div;
    printLog(lvl, errLvl)
    for (let y = 0; y < h; y++) {
      const rev = serp && (y & 1),
      yOffs = y * w;
      for (let x = 0; x < w; x++) {
        const pI = (rev ? w - 1 - x : x) + yOffs,
        i = buff ? (pI << 1) + pI : pI << 2,
        i4 = pI << 2,
        pixelIndex = i / mul,
        sRGB = d[i4 + c],
        cl = linr ? linearLUT[sRGB] : sRGB,
        eErrC = buff ? b[i + c] : 0,
        C = round((lvl * (cl + eErrC)) / 255) * l,
        errC = ((cl - C) + eErrC) * el;

        d[i4 + c] = C;
        diffs(w, rev, wt, c, mul, errC, offslength, pixelIndex, target)
      }
    }
  }
}

function varErrDiffsCustom(f) {
  const {data: d} = f,
  coeff = customCoeffs(),
  b = buffChg(w, h),
  getCoeff = (cl) => {
    if (cl > 127) {
      let cfi = 127 - (cl - 128);
      return [
        coeff[(cfi << 1 + cfi)],
        coeff[(cfi << 1 + cfi) + 1],
        coeff[(cfi << 1 + cfi) + 2]
      ];
    } else {
      let cfi = (cl << 1) + cl;
      return [
        coeff[cfi],
        coeff[cfi + 1],
        coeff[cfi + 2]
      ];
    }
  };

  for (c = 0; c < 3; c++) {
    const lvl = lvls[c], errLvl = errLvls[c];
    for (j = 0; j < sqSz; j++) {
      let x = j % w,
        y = (j / w) | 0,
        rev = serp && (y % 2 !== 0),
        i1 = ((rev ? w - 1 - x : x) + y * w) << 2,
        i = buff ? (i1 >> 1) + (i1 >> 2) : i1,
        sRGB = d[i1 + c],
        cl = linr ? floor(linearLUT[sRGB] * 255) : sRGB,
        [rC, dLC, dC] = getCoeff(cl);
        div = rC + dLC + dC,
        eErrC = buff ? b[i + c] : 0,
        C = round(((lvl) * (cl + eErrC)) / 255) * (255 / lvl),
        errC = ((cl - C) + eErrC) * errLvl / div,
        n = rev ? buff ? -3 : -4 : buff ? 3 : 4;

        d[i1 + c] = C;
        if (buff) {
          b[i + n + c] += errC * rC;
          i += (w << 1) + w;
          b[i - n + c] += errC * dLC;
          b[i + c] += errC * dC;
        } else {
          d[i + n + c] += errC * rC;
          i += w << 2;
          d[i - n + c] += errC * dLC;
          d[i + c] += errC * dC;
      }
    }
  }
}

function zhoufang_coeffs() {
  let kLvls = [
    0, 13, 0, 5,
    1, 1300249, 0, 499250,
    2, 213113, 287, 99357,
    3, 351854, 0, 199965,
    4, 801100, 0, 490999,
    10, 704075, 297466, 303694,
    22, 46613, 31917, 21469,
    32, 47482, 30617, 21900,
    44, 43024, 42131, 14826,
    64, 36411, 43219, 20369,
    72, 38477, 53843, 7678,
    77, 40503, 51547, 7948,
    85, 35865, 34108, 30026,
    95, 34117, 36899, 28983,
    102, 35464, 35049, 29485,
    107, 16477, 18810, 14712,
    112, 33360, 37954, 28685,
    127, 35269, 36066, 28664
  ];

  let zhoufang_coeffs = new Uint32Array(1024);
  let kP, rP, dLP, dP;
  kP = kLvls[0];
  rP = zhoufang_coeffs[0] = zhoufang_coeffs[1020 + 0] = kLvls[1];
  dLP = zhoufang_coeffs[1] = zhoufang_coeffs[1020 + 1] = kLvls[2];
  dP = zhoufang_coeffs[2] = zhoufang_coeffs[1020 + 2] = kLvls[3];
  zhoufang_coeffs[3] = zhoufang_coeffs[1020 + 3] = kLvls[1] + kLvls[2] + kLvls[3];

  for (let a = 1; a < 4; a++) {
    for (let i = 4; i < kLvls.length; i += 4) {
      let k = kLvls[i],
        r = kLvls[i + 1],
        dL = kLvls[i + 2],
        d = kLvls[i + 3];
      let delta = (k - kP);

      for (let j = 1; kP + j <= k; j++) {
        let kj = (kP + j) << 2,
          rj = (r * j + rP * (delta - j)) / delta | 0,
          dLj = (dL * j + dLP * (delta - j)) / delta | 0,
          dj = (d * j + dP * (delta - j)) / delta | 0,
          sum = rj + dLj + dj;
        zhoufang_coeffs[kj] = zhoufang_coeffs[255 << 2 - kj] = rj;
        zhoufang_coeffs[kj + 1] = zhoufang_coeffs[255 << 2 - kj + 1] = dLj;
        zhoufang_coeffs[kj + 2] = zhoufang_coeffs[255 << 2 - kj + 2] = dj;
        zhoufang_coeffs[kj + 3] = zhoufang_coeffs[255 << 2 - kj + 3] = sum;
      }

      kP = k;
      rP = r,
        dLP = dL;
      dP = d;
    }
  }
  return zhoufang_coeffs
}

let ostro_coeffs = `//right, down left, down, sum
  13,   0,   5,  //  0
  13,   0,   5,  //  1
  21,   0,  10,  //  2
   7,   0,   4,  //  3
   8,   0,   5,  //  4
  47,   3,  28,  //  5
  23,   3,  13,  //  6
  15,   3,   8,  //  7
  22,   6,  11,  //  8
  43,  15,  20,  //  9
   7,   3,   3,  // 10
 501, 224, 211,  // 11
 249, 116, 103,  // 12
 165,  80,  67,  // 13
 123,  62,  49,  // 14
 489, 256, 191,  // 15
  81,  44,  31,  // 16
 483, 272, 181,  // 17
  60,  35,  22,  // 18
  53,  32,  19,  // 19
 237, 148,  83,  // 20
 471, 304, 161,  // 21
   3,   2,   1,  // 22
 459, 304, 161,  // 23
  38,  25,  14,  // 24
 453, 296, 175,  // 25
 225, 146,  91,  // 26
 149,  96,  63,  // 27
 111,  71,  49,  // 28
  63,  40,  29,  // 29
  73,  46,  35,  // 30
 435, 272, 217,  // 31
 108,  67,  56,  // 32
  13,   8,   7,  // 33
 213, 130, 119,  // 34
 423, 256, 245,  // 35
   5,   3,   3,  // 36
 281, 173, 162,  // 37
 141,  89,  78,  // 38
 283, 183, 150,  // 39
  71,  47,  36,  // 40
 285, 193, 138,  // 41
  13,   9,   6,  // 42
  41,  29,  18,  // 43
  36,  26,  15,  // 44
 289, 213, 114,  // 45
 145, 109,  54,  // 46
 291, 223, 102,  // 47
  73,  57,  24,  // 48
 293, 233,  90,  // 49
  21,  17,   6,  // 50
 295, 243,  78,  // 51
  37,  31,   9,  // 52
  27,  23,   6,  // 53
 149, 129,  30,  // 54
 299, 263,  54,  // 55
  75,  67,  12,  // 56
  43,  39,   6,  // 57
 151, 139,  18,  // 58
 303, 283,  30,  // 59
  38,  36,   3,  // 60
 305, 293,  18,  // 61
 153, 149,   6,  // 62
 307, 303,   6,  // 63
   1,   1,   0,  // 64
 101, 105,   2,  // 65
  49,  53,   2,  // 66
  95, 107,   6,  // 67
  23,  27,   2,  // 68
  89, 109,  10,  // 69
  43,  55,   6,  // 70
  83, 111,  14,  // 71
   5,   7,   1,  // 72
 172, 181,  37,  // 73
  97,  76,  22,  // 74
  72,  41,  17,  // 75
 119,  47,  29,  // 76
   4,   1,   1,  // 77
   4,   1,   1,  // 78
   4,   1,   1,  // 79
   4,   1,   1,  // 80
   4,   1,   1,  // 81
   4,   1,   1,  // 82
   4,   1,   1,  // 83
   4,   1,   1,  // 84
   4,   1,   1,  // 85
  65,  18,  17,  // 86
  95,  29,  26,  // 87
 185,  62,  53,  // 88
  30,  11,   9,  // 89
  35,  14,  11,  // 90
  85,  37,  28,  // 91
  55,  26,  19,  // 92
  80,  41,  29,  // 93
 155,  86,  59,  // 94
   5,   3,   2,  // 95
   5,   3,   2,  // 96
   5,   3,   2,  // 97
   5,   3,   2,  // 98
   5,   3,   2,  // 99
   5,   3,   2,  //100
   5,   3,   2,  //101
   5,   3,   2,  //102
   5,   3,   2,  //103
   5,   3,   2,  //104
   5,   3,   2,  //105
   5,   3,   2,  //106
   5,   3,   2,  //107
 305, 176, 119,  //108
 155,  86,  59,  //109
 105,  56,  39,  //110
  80,  41,  29,  //111
  65,  32,  23,  //112
  55,  26,  19,  //113
 335, 152, 113,  //114
  85,  37,  28,  //115
 115,  48,  37,  //116
  35,  14,  11,  //117
 355, 136, 109,  //118
  30,  11,   9,  //119
 365, 128, 107,  //120
 185,  62,  53,  //121
  25,   8,   7,  //122
  95,  29,  26,  //123
 385, 112, 103,  //124
  65,  18,  17,  //125
 395, 104, 101,  //126
   4,   1,   1,  //127
`

let zhoufang_coeffs_fixed = `//right, down left, down, sum
      13,       0,       5,  //  0
 1300249,       0,  499250,  //  1
  213113,     287,   99357,  //  2
  351854,       0,  199965,  //  3
  801100,       0,  490999,  //  4
  784929,   49577,  459781,  //  5
  768758,   99155,  428564,  //  6
  752587,  148733,  397346,  //  7
  736416,  198310,  366129,  //  8
  720245,  247888,  334911,  //  9
  704075,  297466,  303694,  // 10
  649286,  275336,  280175,  // 11
  594498,  253207,  256656,  // 12
  539709,  231078,  233137,  // 13
  484921,  208949,  209619,  // 14
  430132,  186820,  186100,  // 15
  375344,  164691,  162581,  // 16
  320555,  142562,  139062,  // 17
  265767,  120433,  115544,  // 18
  210978,   98304,   92025,  // 19
  156190,   76175,   68506,  // 20
  101401,   54046,   44987,  // 21
   46613,   31917,   21469,  // 22
   46699,   31787,   21512,  // 23
   46786,   31657,   21555,  // 24
   46873,   31527,   21598,  // 25
   46960,   31397,   21641,  // 26
   47047,   31267,   21684,  // 27
   47134,   31137,   21727,  // 28
   47221,   31007,   21770,  // 29
   47308,   30877,   21813,  // 30
   47395,   30747,   21856,  // 31
   47482,   30617,   21900,  // 32
   47110,   31576,   21310,  // 33
   46739,   32536,   20721,  // 34
   46367,   33495,   20131,  // 35
   45996,   34455,   19542,  // 36
   45624,   35414,   18952,  // 37
   45253,   36374,   18363,  // 38
   44881,   37333,   17773,  // 39
   44510,   38293,   17184,  // 40
   44138,   39252,   16594,  // 41
   43767,   40212,   16005,  // 42
   43395,   41171,   15415,  // 43
   43024,   42131,   14826,  // 44
   42693,   42185,   15103,  // 45
   42362,   42239,   15380,  // 46
   42032,   42294,   15657,  // 47
   41701,   42348,   15934,  // 48
   41370,   42403,   16211,  // 49
   41040,   42457,   16488,  // 50
   40709,   42511,   16766,  // 51
   40378,   42566,   17043,  // 52
   40048,   42620,   17320,  // 53
   39717,   42675,   17597,  // 54
   39386,   42729,   17874,  // 55
   39056,   42783,   18151,  // 56
   38725,   42838,   18428,  // 57
   38394,   42892,   18706,  // 58
   38064,   42947,   18983,  // 59
   37733,   43001,   19260,  // 60
   37402,   43055,   19537,  // 61
   37072,   43110,   19814,  // 62
   36741,   43164,   20091,  // 63
   36411,   43219,   20369,  // 64
   36669,   44547,   18782,  // 65
   36927,   45875,   17196,  // 66
   37185,   47203,   15609,  // 67
   37444,   48531,   14023,  // 68
   37702,   49859,   12437,  // 69
   37960,   51187,   10850,  // 70
   38218,   52515,    9264,  // 71
   38477,   53843,    7678,  // 72
   38882,   53383,    7732,  // 73
   39287,   52924,    7786,  // 74
   39692,   52465,    7840,  // 75
   40097,   52006,    7894,  // 76
   40503,   51547,    7948,  // 77
   39923,   49367,   10707,  // 78
   39343,   47187,   13467,  // 79
   38763,   45007,   16227,  // 80
   38184,   42827,   18987,  // 81
   37604,   40647,   21746,  // 82
   37024,   38467,   24506,  // 83
   36444,   36287,   27266,  // 84
   35865,   34108,   30026,  // 85
   35690,   34387,   29921,  // 86
   35515,   34666,   29817,  // 87
   35340,   34945,   29713,  // 88
   35165,   35224,   29608,  // 89
   34991,   35503,   29504,  // 90
   34816,   35782,   29400,  // 91
   34641,   36061,   29295,  // 92
   34466,   36340,   29191,  // 93
   34291,   36619,   29087,  // 94
   34117,   36899,   28983,  // 95
   34309,   36634,   29054,  // 96
   34501,   36370,   29126,  // 97
   34694,   36106,   29198,  // 98
   34886,   35841,   29269,  // 99
   35079,   35577,   29341,  //100
   35271,   35313,   29413,  //101
   35464,   35049,   29485,  //102
   31666,   31801,   26530,  //103
   27869,   28553,   23575,  //104
   24071,   25305,   20621,  //105
   20274,   22057,   17666,  //106
   16477,   18810,   14712,  //107
   19853,   22638,   17506,  //108
   23230,   26467,   20301,  //109
   26606,   30296,   23095,  //110
   29983,   34125,   25890,  //111
   33360,   37954,   28685,  //112
   33487,   37828,   28683,  //113
   33614,   37702,   28682,  //114
   33741,   37576,   28680,  //115
   33869,   37450,   28679,  //116
   33996,   37324,   28678,  //117
   34123,   37198,   28676,  //118
   34250,   37072,   28675,  //119
   34378,   36947,   28673,  //120
   34505,   36821,   28672,  //121
   34632,   36695,   28671,  //122
   34759,   36569,   28669,  //123
   34887,   36443,   28668,  //124
   35014,   36317,   28666,  //125
   35141,   36191,   28665,  //126
   35269,   36066,   28664,  //127
`

function customCoeffs() {
  let coefficient = gIdV("coefficientsInput");

  let noComments = coefficient.replace(/\/\/.*$/gm, "");

  let coeffsArray = noComments
    .split(",")
    .map(str => str.trim())
    .filter(str => str !== "")
    .map(Number);

  let isFloat = coeffsArray.some(n => n % 1 !== 0);

  function getDecimalPrecision(num) {
    if (num % 1 === 0) return 0;
    let decimalPart = num.toString().split(".")[1] || "";
    return decimalPart.length;
  }

  let float32 = 3.4028235e38;

  let isFloat32 = coeffsArray.some(num => {
    let precision = getDecimalPrecision(num);
    return (
      precision <= 7 &&
      abs(num) <= float32 &&
      abs(num) >= -float32
    );
  });

  let is8bit = coeffsArray.every(n => n >= -128 && n <= 127);
  let is16bit = coeffsArray.every(n => n >= -32768 && n <= 32767);
  let is32bit = coeffsArray.every(n => n >= -2147483648 && n <= 2147483647);

  if (isFloat) {
    if (isFloat32) {
      return new Float32Array(coeffsArray);
    } else {
      return new Float64Array(coeffsArray);
    }
  }

  if (is8bit) {
    return new Int8Array(coeffsArray);
  } else if (is16bit) {
    return new Int16Array(coeffsArray);
  } else if (is32bit) {
    return new Int32Array(coeffsArray);
  }

  return new Int32Array(coeffsArray);
}

/*
# Credits

*https://en.wikipedia.org/wiki/Error_diffusion*
*https://pippin.gimp.org/a_dither/*
*https://potch.me/demos/playdither*
*https://github.com/robertkist/libdither*
*https://app.dithermark.com*
*https://perso.liris.cnrs.fr/ostrom/publications/pdf/SIGGRAPH01_varcoeffED.pdf*
*https://observablehq.com/@jobleonard/variable-coefficient-dithering*
*http://research.cs.wisc.edu/graphics/Courses/559-f2002/lectures/cs559-5.ppt*
*http://caca.zoy.org/study*
*/